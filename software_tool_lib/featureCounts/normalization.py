#!/usr/bin/env python
"""
File: normalization.py
Description: Standardize gene expression with FPKM.
CreateDate: 2022/1/10
Author: xuwenlin
E-mail: wenlinxu.njfu@outlook.com
"""
from io import StringIO, TextIOWrapper
from os import getcwd
from pandas import read_csv, read_table
import click
from pybioinformatic import merge_duplicate_indexes, get_FPKM, get_TPM, Displayer
displayer = Displayer(__file__.split('/')[-1], version='0.1.0')

file_content = """
# featureCounts command\n
Geneid  Chr  Start End Strand Length Sample1 Sample2 Sample3 ...\n
gene1   Chr1  1000 3000   +    2000     1       0       0    ...\n
gene2   Chr2  1000 2000   -    1000     21      51      34   ...\n
......  ....  .... .... ..... ...... ....... ....... ....... ...\n
gene100 Chr19 2100 4200   -    2100    2345    2137    1987  ...\n
"""


def main(featureCounts_result_file: TextIOWrapper,
         min_value: float = None,
         out_path: str = getcwd()) -> None:
    """
    Standardize gene expression with FPKM
    :param featureCounts_result_file: gene expression matrix file generated by featureCounts software (TAB delimiters)

                                      # featureCounts command
                                      Geneid     Chr    Start    End    Strand   Length   Sample1   Sample2   Sample3
                                      gene1      Chr01   100     300      +       200        1         0         0
                                      gene2      Chr02   1000    2000     -      1000       21        51        34
                                      ......     ......  .....   .....  ......   ......   .......   .......   .......
                                      gene1000   Chr19   2100    4200     -      2100      2345      2137      1987

    :param min_value: Gene minimum expression (genes whose expression is less than the specified value in all samples
                      are filtered out). {type=float, default=None}
    :param out_path: Output path. {type=str, default=.}
    :return: None
    """

    def __rename(columns: list):
        columns = [i.split('/')[-1] for i in columns]
        return columns

    # read in gene expression matrix
    if featureCounts_result_file.name == '<stdin>':
        featureCounts_result_file = ''.join(click.open_file('-').readlines())
        featureCounts_result_file = StringIO(featureCounts_result_file)
        df = read_csv(featureCounts_result_file, lineterminator='\n', skiprows=1, sep='\t', index_col=0)
    else:
        df = read_table(featureCounts_result_file, header=1, index_col=0)
    df = df.iloc[:, 4:]

    # rename sample name
    df.columns = __rename(df.columns.tolist())

    # extract raw reads count
    reads_count = merge_duplicate_indexes(df=df.iloc[:, 1:])
    reads_count.to_csv(f'{out_path}/reads.count.fc.xls', sep='\t', float_format='%.0f')

    # calculate FPKM
    FPKM = get_FPKM(df, min_value)
    FPKM.to_csv(f'{out_path}/FPKM.fc.xls', sep='\t')

    # calculate TPM
    TPM = get_TPM(df, min_value)
    TPM.to_csv(f'{out_path}/TPM.fc.xls', sep='\t')


@click.command(context_settings=dict(help_option_names=['-h', '--help']))
@click.option('-i', '--gene_exp', 'gene_exp_file',
              metavar='<exp file|stdin>', type=click.File('r'), required=True,
              help=f"""Gene expression matrix file generated by featureCounts software. (TAB delimiters)
              \033[33m\n{file_content}\033[0m""")
@click.option('-m', '--min_exp', 'min_exp',
              metavar='<float>', type=float, default=0.00, show_default=True,
              help='Gene minimum expression threshold in all samples.')
@click.option('-o', '--output-path', 'output_path',
              metavar='<str>', default=getcwd(), show_default=True,
              help='Output path.')
@click.option('-V', '--version', 'version', help='Show author and version information.',
              is_flag=True, is_eager=True, expose_value=False, callback=displayer.version_info)
def run(gene_exp_file, min_exp, output_path):
    """Standardize gene expression with FPKM and TPM."""
    main(gene_exp_file, min_exp, output_path)


if __name__ == '__main__':
    run()
